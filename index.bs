<pre class='metadata'>
Title: CSS Content Visibility
Shortname: css-content-visibility
Level: 1
Status: UD
Group: csswg
Work Status: exploring
URL: https://wicg.github.io/display-locking
Editor: Tab Atkins-Bittner, Google
Editor: Vladimir Levin, Google
Abstract: This spec introduces a content-visibility CSS property, allowing authors
          to control element content visibility, while at the same time providing strong
          rendering performance hints to the user-agent. The user-agent can use the hints
          to optimize rendering performance, making interactions with large amounts of
          content perform well.
</pre>

Introduction {#intro}
============

Content Visibility (a.k.a. Display Locking) is a CSS property designed to allow
developers and browsers to easily scale to large amount of content and provide
strong hints which allow the user-agent to delay rendering <a href=#f1>[1]</a>
work.  More concretely, the goals are:

* Avoid rendering work for content not visible to the user.
* Support user-agent features and all layout algorithms (e.g. responsive
    design, flexbox, grid) for this content.

Optimizing behavior and performance of the following use-cases motivate this work:

* Fast display of large HTML documents (examples: HTML one-page spec; other
    long documents)
* Scrollers with a large amount of content, without resorting to virtualization
    (examples: Facebook and Twitter feeds, CodeMirror documents)

Motivation & Background {#motivation}
-----------------------

On the one hand, faster web page loads and interactions directly improve the
user experience of the web. On the other hand, web sites each year grow larger
and more complex than the last, in part because they support more and more use
cases, and contain more information. The most common UI pattern for the web is
scrolling, which leads to pages with a lot of non-visible (off-screen or hidden)
DOM. Since the DOM presently renders atomically, it inherently takes more and
more time to render on the same machine.

Web developers are in a good position to know whether rendering a particular
[=subtree=] that is off-screen is needed for the visual representation of their
page. Specifically, if the layout of an off-screen box and its [=subtree=] has a
visible and necessary effect on screen then such rendering is required.
Otherwise, it is not. Since web developers are in a good position to have this
information, they can provide the user-agent strong hints indicating that
rendering for a given [=subtree=] is not required in certain cases.

Traditionally, two techniques of providing this information to the user-agent
are to mark non-visible DOM as "invisible" <a href=#f2>[2]</a>, or to use
virtualization <a href=#f3>[3]</a>. Browser implementors also want to reduce
loading and rendering time of web apps. Common techniques to do so include
adding caching of rendering state <a href=#f4>[4]</a>, and avoiding rendering
work <a href=#f5>[5]</a> for content that is not visible.

These techniques can work in many cases but have drawbacks and limitations:

* <a href=#f2>[2]</a> and <a href=#f3>[3]</a> usually means that such content
    is not available to user-agent features, such as find-in-page functionality.
    Also, content that is merely placed off-screen may or may not have rendering
    cost (it depends on browser heuristics), which makes the technique
    unreliable.

* Caching intermediate rendering state is hard work, and often has performance
    limitations and cliffs that are not obvious to developers.  Similarly,
    relying on the browser to avoid rendering for content that is clipped out or
    not visible is sometimes not reliable, as it's hard for the browser to
    efficiently detect what content is not visible and does not affect visible
    content in any way.

Previously adopted web APIs, in particular the 'contain' and 'will-change' CSS
properties, add ways to specify forms of rendering isolation or isolation
hints, with the intention of them being a mechanism for the web developer to
help the browser optimize rendering for the page.

While these forms of isolation help, they do not guarantee that isolated
content does not need to be rendered at all.  Ideally there would be a way for
the developer to specify that specific parts of the DOM need not be rendered,
and pair that with a guarantee that when later rendered, it would not
invalidate more than a small amount of style, layout, or paint in the rest of
the document.

Definitions {#definitions}
===========

* <dfn export>subtree</dfn>: an element's subtree are all nodes that comprise
    the [=flattened element tree=] rooted at the given element, with the exception
    of the element itself. In other words, this refers to the [=flat tree=]
    descendants of the element. Note that the term <em>content</em> in the
    property name 'content-visibility' refers to the same descendants.
* <dfn export>off-screen</dfn>: an element is considered to be off-screen if
    its border box does not intersect the visual viewport plus a user-agent
    specified, margin.
    <div class=note>
      The the user-agent is free to consider any margin around the viewport
      when computing whether the element is off-screen. The margin is meant to
      allow the user-agent to start preparing the element ahead of time, before
      it enters the viewport. A 50% viewport margin is a reasonable
      implementation default.
    </div>
    <div class=note>
      See <a href="#restrictions">Restrictions and Clarifications</a> for
      timing information related to determining off-screen state.
    </div>
* <dfn export>on-screen</dfn>: an element is considered to be on-screen if it
    is not [=off-screen=]
* <dfn export>skipped</dfn>: when an element is skipped, its [=subtree=] must
    not painted or hit-tested. Furthermore, a skipped element must have
    [=layout containment=], [=style containment=], [=paint containment=], and
    [=size containment=] applied to it in addition to other containment values.
    The user-agent should avoid as much rendering work in the skipped element's
    [=subtree=] as possible.
    <div class=note>
      Rendering work can be avoided due to the combination of
      containment and the fact that the [=subtree=] is not painted.  As an example,
      because of the containment applied, in most cases it should be possible to skip
      computing styles, or determining layout box sizes and positions, unless
      explicitly requested by script.
    </div>
* <dfn export>gains containment</dfn>: for an an element to gain containment,
    the user-agent must apply [=layout containment=], [=style containment=],
    and [=paint containment=] to it in addition to any other containment properties.

The 'content-visibility' property {#content-visibility}
=================================

<pre class=propdef>
Name: content-visibility
Value: visible | auto | hidden
Initial: visible
Inherited: no
</pre>

<dl dfn-type value dfn-for=content-visibility>
    : <dfn export>visible</dfn>
    :: No effect. This provides no extra information or hints to the user-agent.

    : <dfn export>auto</dfn>
    :: The element [=gains containment=].
         If <strong>all of</strong> the following conditions hold then the element is also [=skipped=]:
           * The element is [=off-screen=].
           * Neither the element nor any of its [=subtree=] elements are
               focused as described in the <a
               href="https://html.spec.whatwg.org/multipage/interaction.html#focus">focus</a>
               section of the HTML spec.
           * Neither the element nor any of its [=subtree=] elements are
               selected as described in the <a
               href="https://drafts.csswg.org/css-pseudo-4/#highlight-pseudos">highlight
               pseudo-elements</a> section.

         It is important to note that the contents of the [=subtree=] must be
         accessible to user-agent features such as find-in-page, tab order
         navigation, etc. This is true regardless of whether the element is
         [=skipped=] or not. In particular, this means that elements in the
         [=subtree=] of a [=skipped=] ''content-visibility: auto'' element are
         able to be focused and selected.

    : <dfn export>hidden</dfn>
    :: The element is [=skipped=].

         Note that in this case, the contents of the [=subtree=] are not accessible
         to user-agent features, such as find-in-page, tab order navigation,
         etc. This means that elements in the [=subtree=] of a [=skipped=]
         ''content-visibility: hidden'' element can neither be selected nor
         focused.
</dl>

Note that when the element is [=skipped=] and the rendering work is avoided,
the user-agent should retain the previously computed layout state if possible.

<div class=note>
  Intuitively, a [=hidden=] value means that the element behaves in a way that
  does not expose the contents of its [=subtree=] to the user (but still has an
  effect on layout, especially in conjunction with `contain-intrinsic-size`).
  Script interactions are required for the content to appear to the user.

  In contrast, a value of [=auto=] means that the element behaves as if the
  contents of the [=subtree=] are accessible to the user. The content can be
  interacted with in the usual ways: scrolling will reveal the content, tab
  order navigation will visit the [=subtree=], find-in-page will find matches, etc.
  The fact that some [=off-screen=] elements with ''content-visibility: auto'' are
  [=skipped=] is a rendering performance optimization.

  Note that selected and focused elements affected by ''content-visibility:
  auto'' are not [=skipped=], since users can interact with this content when
  it is off-screen. For example, a user can copy (via a shortcut) text that was
  selected and scrolled off-screen. For this reason, elements and subtrees with
  focus or selection remain not [=skipped=].
</div>

<div class=note>
  It is worthwhile to note the interaction between 'content-visibility' and
  containment: If the element has a 'content-visibility' value other than
  [=visible=], the user-agent enforces [=style containment=], [=layout
  containment=], and [=paint containment=] on the element. Additionally, if the
  element is [=skipped=], then the user-agent also enforces [=size
  containment=]. These containment values are added on top of any existing
  containment values.

  If a container element is an element which has a 'content-visibility' value
  that adds containment, then the following properties hold:

  * [=layout containment=] ensures that the user-agent is able to omit layout
      work in [=skipped=] subtrees, since the results of such layouts will not
      affect elements outside of the container element.
  * [=style containment=] ensures that counters do not have to be processed in
      [=skipped=] subtrees, since they do not affect counters outside of the
      container element.
  * [=size containment=] ensures that the user-agent is able to omit layout in
      [=skipped=] subtrees, since the results of such layouts will not affect the
      container element's size.
  * [=paint containment=] ensures that [=ink overflow=] of painted contents is
      clipped; this, in turn, means that user-agent can reliably determine when
      the visible portion of the element approaches the viewport and start
      painting it (in the ''content-visibility: auto'' case).

  Note that in the ''content-visibility: auto'' case, [=layout containment=],
  [=style containment=], and [=paint containment=] persist even if the element
  is not [=skipped=]. This is done to prevent layout changes that would be
  incurred by containment changes as a result element entering and exiting the
  [=skipped=] state.
</div>

Restrictions and Clarifications {#restrictions}
===============================

1. In situations where [=layout containment=] has no effect (e.g. the
    element does not generate a principal box), 'content-visibility' values also
    have no effect.

2. <a href="https://html.spec.whatwg.org/multipage/rendering.html#replaced-elements">
    Replaced elements</a> do not paint their contents if they
    are [=skipped=] due to 'content-visibility'. That is, the element's border
    and background are painted, but the replaced content -- as described in
    steps 7.1 and 7.2.4 of <a
    href="https://www.w3.org/TR/CSS21/zindex.html#painting-order">the painting
    order</a> steps -- is not.

3. From the perspective of an <a
    href="https://w3c.github.io/IntersectionObserver/">intersection observer</a>,
    elements in the [=subtree=] of a [=skipped=] element are not intersecting the <a
    href="https://w3c.github.io/IntersectionObserver/#dom-intersectionobserver-root">root</a>.
    This is true even if both the root and the target elements are in the [=subtree=]
    of a [=skipped=] element.

4. From the perpsective of a <a
    href="https://drafts.csswg.org/resize-observer/#resize-observer-interface">resize
    observer</a>, elements in the [=subtree=] of a [=skipped=] element do not
    change their size. If these elements become non-skipped again, the resize
    observation will be delivered if the new size differs from the last size
    used to notify the resize observer.

5. When the [=off-screen=] state of an element changes, and if that change
    affects the [=skipped=] state of the element, then this change will take
    effect after the requestAnimationFrame callbacks of the frame that renders
    the effects of the change have run. Specifically, such changes will take
    effect right after step 11 of <a
    href="https://html.spec.whatwg.org/multipage/webappapis.html#update-the-rendering">Update
    the Rendering</a> step of the Processing Model.
    <div class=note>
      Determining the viewport intersection of the element can be done with an
      internal version of an IntersectionObserver. However, since the
      observations from this are dispatched at step 12 of Update the
      Rendering, any changes to the [=skipped=] (and thus painted) state will
      not be visible to the user until the next frame's processing. For this
      reason, updating the [=skipped=] state, including containment
      adjustments, is deferred to that frame as well. This ensures that script
      accessing, for example, the containment value of the element between
      these two events (internal intersection observation and [=skipped=] state
      update) will retrieve values consistent with current painted state and
      not cause any forced layouts.
    </div>

6. For an [=off-screen=] element with ''content-visibility: auto'' and for
    elements in its subtree, <a
    href="https://drafts.csswg.org/cssom-view/#dom-element-scrollintoview"><code>scrollIntoView()</code></a>
    computes the element's bounds with its existing [=size containment=] applied
    on the ''content-visibility: auto'' element.
    <div class=note>
      <code>scrollIntoView()</code> brings the targeted element into the
      viewport. This means that elements with ''content-visibility: auto'' will
      not be [=skipped=] and thus will not have [=size containment=]
      automatically applied to them after scroll is applied. However, since
      <code>scrollIntoView()</code> first computes the bounds, and
      <em>then</em> brings the element into the viewport, [=size containment=]
      has to be respected when computing the needed scroll position. Note that
      this only makes a difference when [=size containment=] changes the
      element's size from what it would have been without it.
    </div>

7. When an [=off-screen=] element with ''content-visibility: auto'' or any
    element in its subtree is focused, the focus state applies
    before the scroll position is determined.
    <div class=note>
      Since <code>focus()</code> can bring an element into the viewport, the
      user-agent needs to compute the elements bounds. However, unlike
      <code>scrollIntoView()</code>, the focus property applies first, meaning
      that the element becomes non-[=skipped=] and no longer has [=size
      containment=] applied at the time the bounds computation is made. Note
      that this is consistent with the order of <a
      href="https://html.spec.whatwg.org/multipage/interaction.html#dom-focus"><code>focus()</code></a>
      specification, and applies for both focus gained via <code>focus()</code>
      function and user gestures.
    </note>

8. If an <a
    href="https://html.spec.whatwg.org/multipage/iframe-embed-object.html#the-iframe-element">iframe</a>
    element is [=skipped=], then the content of the document inside the iframe
    does not paint or participate in hit testing. The user-agent should skip <a
    href="https://html.spec.whatwg.org/multipage/webappapis.html#update-the-rendering">Update
    the Rendering</a> step of the Processing Model in the frame's event loop,
    if possible (see note below).
    <div class=note>
      As is the case with other elements, when [=skipped=], contents of an
      iframe are not painted. With iframes there is an opportunity to skip all
      of the steps of the Update the Rendering steps. The user-agent should
      skip this work if possible. There are situations, where skipping the step
      may not be possible. For instance, if an iframe becomes [=skipped=] at
      some point, then the painted output needs to be removed. Thus, Update the
      Rendering step has to run at least once.
    </div>

9. The subtree of a [=skipped=] element does not contribute
    to the result of <a
    href="https://html.spec.whatwg.org/multipage/dom.html#the-innertext-idl-attribute">innerText</a>.

Accessibility {#accessibility}
=============

Similar to the way 'content-visibility' affects painted output of the element's
[=subtree=], it also affects information exposed to the
<a href="https://w3c.github.io/css-aam/#dfn-accessibility-tree">accessibility
tree</a> and <a href="https://w3c.github.io/css-aam/#dfn-assistive-technology">
assistive technologies</a>:
* Subtrees affected by ''content-visibility: visible'' or ''content-visibility: auto''
    that are not [=skipped=] should be included in the accessibility tree as usual.
* Subtrees of [=skipped=] elements should not be included in the accessibility tree,
    with the following exception:
    * Subtrees which are affected by ''content-visibility: auto'' and are
        [=skipped=] should be also be included in the accessibility tree
        subject to the rendering constraints below.

<div class=note>
  Since assistive technologies may provide quick access to offscreen elements,
  it is desirable that elements in ''content-visibility: auto'' subtrees be made
  available to assistive technologies to provide this functionality, since they
  are intended to be observable to users.

  Conversely, since elements in ''content-visibility: hidden'' subtrees are not
  intended to be observable by users, they should not be exposed to assistive
  technology.
</div>

* The rendering performance of subtrees affected by 'content-visibility' and
    exposed to assistive technologies must reasonably match the rendering
    performance of the same subtrees exposed to painted output.

<div class=note>
  The requirement of rendering performance equivalency stems from privacy
  considerations. It is imperative that the user-agent ensures that a page
  using 'content-visibility' cannot use timing information to deduce whether
  the user is using assistive technologies. For this reason, the rendering
  performance of information exposed to assistive technologies must be the same
  as the rendering performance of information exposed to painted output.

  In other words, if the user-agent omits rendering work when producing painted
  output, then it must also omit the same rendering work when providing
  information for assistive technologies, and vice-versa.
</div>

<div class=note>
  If the user-agent omits rendering work, then it should still make the effort
  to expose ''content-visibility: auto'' [=skipped=] elements and their
  subtrees to assistive technology without exposing any of the layout state,
  since it is not available due to omitted work.

  If such action is not possible, then the user-agent may omit these subtrees
  from the accessibility tree.
</div>

Privacy & Security Considerations {#priv-sec}
=================================

As discussed in the <a href="#accessibility">Accessibility Section</a>, if the
performance of using this feature differs greatly between accessibility and
non-accessibility paths, then the origin can use timing attacks to determine
whether the user is using assistive technologies. There may already be other
ways of determining whether assistive technologies are being utilized. However,
the requirement to reasonably match the performance characteristics of
accessibility and non-accessibility paths for this feature minimizes the risk
of using this particular feature for accessibility detection.

Other than the use case for detecting accessibility, this feature does not deal
with any personally identifiable or sensitive information. Hence, the risk to
the user is low.

It may seem that a cross-origin iframe can learn that it is offscreen, and
under a content-visibility hidden or auto ancestor, by noticing that
requestAnimationFrame callbacks are not run. However, since user-agents are
already <a
href="https://html.spec.whatwg.org/multipage/webappapis.html#rendering-opportunity">allowed
to throttle</a> or stop generating frames for off-screen cross-origin iframes
and since [=skipped=] element's descendants are not intersecting the viewport
from an IntersectionObserver perspective, the fact that
requestionAnimationFrame callbacks are not run is insufficient information to
detect 'content-visibility' ancestors.

Examples {#examples}
========

<div class=example>
	<xmp highlight=markup>
		<style>
		.sv {
		  content-visibility: auto;
      min-height: 50px;
		}
		</style>

		<div class=sv>
		  ... some content goes here ...
		</div>
	</xmp>

  The .sv element's 'content-visibility' value [=auto=] lets the user-agent
  manage whether the element is [=skipped=].  Specifically when this element is
  near the viewport, the user-agent will begin painting the element.  When the
  element moves away from the viewport, it will stop being painted. In
  addition, the user-agent should skip as much of the rendering work as
  possible when the element is [=skipped=].
</div>

<div class=example>
	<xmp highlight=markup>
		<style>
		.sv {
		  content-visibility: hidden;
		}
		</style>

		<div class=sv>
		  ... some content goes here ...
		</div>
	</xmp>

  In this case, the element is [=skipped=] regardless of viewport intersection.
  This means that the only way to have this [=subtree=] painted is via script
  updating the value to remove 'content-visibility' or change its value. As
  before, the user-agent should skip as much of the rendering in the [=subtree=] as
  possible.

  An additional effect of skipping rendering is that the layout state of the
  [=subtree=] can be preserved by the user-agent, so that removing the
  'content-visibility' property in the future will cause the [=subtree=] to be
  rendered quicker than otherwise possible.
</div>

<div class=example>
	<xmp highlight=markup>
		<style>
    body {
      margin: 0;
    }
		.sv {
		  content-visibility: hidden;

      position: relative;
      left: 10px;
      top: 20px;
		}
    #child {
      position: relative;
      left: 1px;
      top: 2px;

      width: 100px;
      height: 200px;
    }
		</style>

		<div id=target class=sv>
      <div id=child></div>
		  ... some other content goes here ...
		</div>
    <script>
      ...
      // This will force rendering work, including layout,
      // if the UA previously avoided it.
      target.firstElementChild.getBoundingClientRect();
      ...
    </script>
	</xmp>

  Similarly to the last example, the element is [=skipped=]. The user-agent
  should avoid as much rendering work as possible.  However, in this example,
  at some point script accesses a layout value in the element's [=subtree=]. In
  this situation, the user-agent cannot avoid rendering work and has to process
  any previously skipped rendering work in order to return a correct value to
  the caller. In this example, the result of getBoundingClientRect is a rect
  positioned at (11, 22) with a size 100x200.

  Note that repeated calls to the same layout value should not
  cause any additional rendering work, since the user-agent should retain the
  last updated rendering state.

  Also note that this situation in which rendering work is required is not
  unique. There may be other situations in which the user-agent cannot avoid
  rendering work.
</div>

Similarity to visibility {#similarity}
========================

Note that 'content-visibility' bears some similarity in naming to 'visibility'
which is important to address. Like 'visibility', 'content-visibility' controls
whether the element, or its [=subtree=], are painted and hit-tested. However, it
has important distinctions that allow both adoption in a wider set of use-cases
and ability for user-agents to optimize rendering performance:

* 'content-visibility' values cannot be reverted by descendant style. As an
    example, when processing an element that has 'content-visibility' value
    [=hidden=], the user-agent will not paint any of its subtree, even if one of
    the elements in the [=subtree=] has 'content-visibility' value [=visible=]. This
    is important as it makes it possible to skip style part of rendering in
    these [=subtree=], since no descendant value can override 'content-visibility'.
* 'content-visibility' has an [=auto=] value, which allows the user-agent to
    paint the element's [=subtree=] when it approaches the viewport. This allows easy
    adoption of the feature. In contrast, if 'visibility' or ''display: none'' are
    used instead, then it is up to the developer to toggle the values when they
    approach the viewport.
* 'content-visibility' adds in containment. This is an important part of the
    property, which allows the user-agent to skip rendering work in the [=subtree=],
    since it can reason that when the element's [=subtree=] is not painted, then the
    style and layout effects of the [=subtree=] will not affect any visible content.

Alternatives Considered {#alternatives}
=======================

The ''display: none'' CSS property causes content subtrees not to render.
However, there is no mechanism for user-agent features to cause these subtrees
to render. Additionally, the cost of hiding and showing content cannot be
eliminated since ''display: none'' does not preserve the layout state of the
[=subtree=].

''visibility: hidden'' causes subtrees to not paint, but they still need style
and layout, as the [=subtree=] takes up layout space and descendants may be
''visibility: visible''. Note that with sufficient containment and intersection
observer, the functionality provided by 'content-visibility' may be mimicked.
However, ''content-visibility: auto'' also permits user-agent algorithms such
as find-in-page and fragment navigation to access the element's [=subtree=], which
cannot be mimicked by ''visibility''. Overall, 'content-visibility' property is
a stronger signal allowing the user-agent to optimize rendering.

Similar to ''visibility: hidden'', ''contain: strict'' allows the browser to
automatically detect subtrees that are definitely off-screen, and therefore
that don't need to be rendered. However, ''contain: strict'' on its own is not
flexible enough to allow for responsive design layouts that grow elements to
fit their content. To work around this, content could be marked as ''contain:
strict'' when off-screen and then some other value when on-screen (this is
similar to 'content-visibility'). Second, ''contain: strict'' may or may not
result in rendering work, depending on whether the browser detects the content
is actually off-screen. Third, it does not support user-agent features in
cases when it is not actually rendered to the user in the current application
view.


Footnotes {#footnotes}
=========

<p id=f1>[1]: Meaning, the rendering part of the browser event loop.

<p id=f2>[2]: Examples:
placing ''display:none'' CSS on DOM subtrees,
or by placing content far off-screen via tricks like ''margin-left: -10000px''

<p id=f3>[3]: In this context,
virtualization means representing content outside of the DOM,
and inserting it into the DOM only when visible.
This is most commonly used for virtual or infinite scrollers.

<p id=f4>[4]: Examples:
caching the computed style of DOM elements,
the output of text / block layout,
and display list output of paint.

<p id=f5>[5]: Examples:
detecting elements that are clipped out by ancestors,
or not visible in the viewport,
and avoiding some or most rendering lifecycle phases for such content.
